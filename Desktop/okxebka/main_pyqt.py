import sys
import threading
import time
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QGridLayout, QPushButton, QLineEdit, 
                             QListWidget, QTableWidget, QTableWidgetItem, 
                             QTextEdit, QLabel, QButtonGroup, QFrame, QSplitter,
                             QHeaderView, QAbstractItemView)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QObject, QThread
from PyQt5.QtGui import QFont, QPalette, QColor
from okx_trader import OKXTrader, format_currency, format_percentage


class PnLUpdateWorker(QObject):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    update_signal = pyqtSignal(list, float, float)
    log_signal = pyqtSignal(str, str)
    
    def __init__(self, trader):
        super().__init__()
        self.trader = trader
        self.running = True
        
    def run(self):
        while self.running:
            try:
                positions = self.trader.get_positions()
                total_pnl = sum(float(pos.get('upl', 0)) for pos in positions)
                total_pnl_percentage = 0
                
                if positions:
                    total_margin = sum(float(pos.get('margin', 0)) for pos in positions)
                    if total_margin > 0:
                        total_pnl_percentage = (total_pnl / total_margin) * 100
                
                self.update_signal.emit(positions, total_pnl, total_pnl_percentage)
            except Exception as e:
                self.log_signal.emit(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL: {e}", "ERROR")
                
            time.sleep(2)
    
    def stop(self):
        self.running = False


class TradingApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–¢—Ä–µ–π–¥–µ—Ä")
        self.setGeometry(100, 100, 1400, 900)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        try:
            self.trader = OKXTrader()
            self.connected = True
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", "ERROR")
            self.connected = False
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.selected_pair = None
        self.pairs_data = []
        self.logs = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.setup_theme()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.setup_ui()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL
        if self.connected:
            self.setup_pnl_worker()
        
        self.log_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–π–¥–µ—Ä", "INFO")
    
    def setup_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —á–µ—Ä–Ω–æ-–±–µ–ª–æ–π —Ç–µ–º—ã"""
        palette = QPalette()
        palette.setColor(QPalette.Window, QColor(15, 15, 15))
        palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
        palette.setColor(QPalette.Base, QColor(25, 25, 25))
        palette.setColor(QPalette.AlternateBase, QColor(35, 35, 35))
        palette.setColor(QPalette.ToolTipBase, QColor(255, 255, 255))
        palette.setColor(QPalette.ToolTipText, QColor(0, 0, 0))
        palette.setColor(QPalette.Text, QColor(255, 255, 255))
        palette.setColor(QPalette.Button, QColor(45, 45, 45))
        palette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
        palette.setColor(QPalette.BrightText, QColor(255, 0, 0))
        palette.setColor(QPalette.Link, QColor(42, 130, 218))
        palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
        palette.setColor(QPalette.HighlightedText, QColor(0, 0, 0))
        
        self.setPalette(palette)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤
        self.setStyleSheet("""
            QMainWindow {
                background-color: #0f0f0f;
                color: white;
            }
            QWidget {
                background-color: #0f0f0f;
                color: white;
                font-family: 'Segoe UI', Arial, sans-serif;
            }
            QLineEdit {
                background-color: #1a1a1a;
                border: 1px solid #333;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                color: white;
            }
            QLineEdit:focus {
                border: 1px solid #555;
            }
            QPushButton {
                background-color: #2a2a2a;
                border: 1px solid #444;
                border-radius: 6px;
                padding: 10px 16px;
                font-size: 12px;
                font-weight: 500;
                color: white;
            }
            QPushButton:hover {
                background-color: #3a3a3a;
                border: 1px solid #555;
            }
            QPushButton:pressed {
                background-color: #1a1a1a;
            }
            QPushButton.buy {
                background-color: #1e3a2e;
                border: 1px solid #2d5a3d;
                color: #4caf50;
            }
            QPushButton.buy:hover {
                background-color: #2d5a3d;
                color: white;
            }
            QPushButton.sell {
                background-color: #3a1e1e;
                border: 1px solid #5a2d2d;
                color: #f44336;
            }
            QPushButton.sell:hover {
                background-color: #5a2d2d;
                color: white;
            }
            QPushButton.preset {
                padding: 8px 12px;
                font-size: 11px;
                font-weight: 600;
            }
            QListWidget {
                background-color: #1a1a1a;
                border: 1px solid #333;
                border-radius: 6px;
                padding: 4px;
                outline: none;
            }
            QListWidget::item {
                padding: 6px;
                border-radius: 4px;
                margin: 1px;
            }
            QListWidget::item:selected {
                background-color: #3a3a3a;
                color: white;
            }
            QListWidget::item:hover {
                background-color: #2a2a2a;
            }
            QTableWidget {
                background-color: #1a1a1a;
                border: 1px solid #333;
                border-radius: 6px;
                gridline-color: #333;
                outline: none;
            }
            QTableWidget::item {
                padding: 8px;
                border: none;
            }
            QTableWidget::item:selected {
                background-color: #3a3a3a;
            }
            QHeaderView::section {
                background-color: #2a2a2a;
                border: none;
                padding: 8px;
                font-weight: 600;
                color: white;
            }
            QTextEdit {
                background-color: #1a1a1a;
                border: 1px solid #333;
                border-radius: 6px;
                padding: 8px;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 11px;
                color: #ccc;
            }
            QLabel {
                color: #ccc;
            }
            QLabel.header {
                font-size: 14px;
                font-weight: 600;
                color: white;
                margin: 5px 0;
            }
            QLabel.pnl {
                font-size: 16px;
                font-weight: 700;
                padding: 8px;
                border-radius: 6px;
                background-color: #1a1a1a;
            }
            QFrame.separator {
                background-color: #333;
                max-height: 1px;
                margin: 10px 0;
            }
        """)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(15)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–æ—Ä–≥–æ–≤–ª—è
        left_widget = QWidget()
        left_widget.setMaximumWidth(400)
        left_layout = QVBoxLayout(left_widget)
        left_layout.setSpacing(15)
        
        self.setup_search_panel(left_layout)
        self.setup_presets_panel(left_layout)
        self.setup_trading_panel(left_layout)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ–∑–∏—Ü–∏–∏ –∏ –ª–æ–≥–∏
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.setSpacing(15)
        
        self.setup_positions_panel(right_layout)
        self.setup_logs_panel(right_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Horizontal)
        splitter.addWidget(left_widget)
        splitter.addWidget(right_widget)
        splitter.setSizes([400, 1000])
        splitter.setChildrenCollapsible(False)
        
        main_layout.addWidget(splitter)
    
    def setup_search_panel(self, layout):
        """–ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –ø–∞—Ä"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("–ü–æ–∏—Å–∫ –ø–∞—Ä—ã")
        header.setProperty("class", "header")
        layout.addWidget(header)
        
        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: SOL)")
        self.search_input.returnPressed.connect(self.search_pairs)
        search_layout.addWidget(self.search_input)
        
        search_btn = QPushButton("üîç")
        search_btn.setMaximumWidth(50)
        search_btn.clicked.connect(self.search_pairs)
        search_layout.addWidget(search_btn)
        
        layout.addLayout(search_layout)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.pairs_list = QListWidget()
        self.pairs_list.setMaximumHeight(150)
        self.pairs_list.itemClicked.connect(self.select_pair)
        layout.addWidget(self.pairs_list)
        
        # –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞—Ä–∞
        self.selected_pair_label = QLabel("–ü–∞—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        self.selected_pair_label.setStyleSheet("color: #666; font-style: italic;")
        layout.addWidget(self.selected_pair_label)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QFrame()
        separator.setProperty("class", "separator")
        separator.setFrameShape(QFrame.HLine)
        layout.addWidget(separator)
    
    def setup_presets_panel(self, layout):
        """–ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        header = QLabel("–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥")
        header.setProperty("class", "header")
        layout.addWidget(header)
        
        presets_layout = QGridLayout()
        presets_layout.setSpacing(8)
        
        # –ü—Ä–µ—Å–µ—Ç—ã
        presets = [
            ("300", 300, 10),
            ("500", 500, 10), 
            ("1500", 1500, 10)
        ]
        
        for i, (label, amount, leverage) in enumerate(presets):
            # LONG –∫–Ω–æ–ø–∫–∞
            long_btn = QPushButton(f"‚Üó {label}")
            long_btn.setProperty("class", "buy preset")
            long_btn.clicked.connect(lambda checked, a=amount, l=leverage: self.place_preset_order("buy", a, l))
            presets_layout.addWidget(long_btn, 0, i)
            
            # SHORT –∫–Ω–æ–ø–∫–∞  
            short_btn = QPushButton(f"‚Üò {label}")
            short_btn.setProperty("class", "sell preset")
            short_btn.clicked.connect(lambda checked, a=amount, l=leverage: self.place_preset_order("sell", a, l))
            presets_layout.addWidget(short_btn, 1, i)
        
        layout.addLayout(presets_layout)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = QFrame()
        separator.setProperty("class", "separator")
        separator.setFrameShape(QFrame.HLine)
        layout.addWidget(separator)
    
    def setup_trading_panel(self, layout):
        """–ü–∞–Ω–µ–ª—å —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        header = QLabel("–†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
        header.setProperty("class", "header")
        layout.addWidget(header)
        
        # –ú–∞—Ä–∂–∞
        margin_layout = QHBoxLayout()
        margin_layout.addWidget(QLabel("–ú–∞—Ä–∂–∞ (USD):"))
        self.margin_input = QLineEdit("100")
        margin_layout.addWidget(self.margin_input)
        layout.addLayout(margin_layout)
        
        # –ü–ª–µ—á–æ
        leverage_layout = QHBoxLayout()
        leverage_layout.addWidget(QLabel("–ü–ª–µ—á–æ:"))
        
        self.leverage_group = QButtonGroup()
        leverages = [5, 10, 20, 50, 100]
        leverage_buttons_layout = QHBoxLayout()
        
        for i, lev in enumerate(leverages):
            btn = QPushButton(f"{lev}x")
            btn.setCheckable(True)
            if lev == 10:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10x
                btn.setChecked(True)
            self.leverage_group.addButton(btn, lev)
            leverage_buttons_layout.addWidget(btn)
        
        layout.addLayout(leverage_layout)
        layout.addLayout(leverage_buttons_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_layout = QHBoxLayout()
        trading_layout.setSpacing(10)
        
        long_btn = QPushButton("LONG")
        long_btn.setProperty("class", "buy")
        long_btn.setMinimumHeight(50)
        long_btn.clicked.connect(lambda: self.place_order("buy"))
        trading_layout.addWidget(long_btn)
        
        short_btn = QPushButton("SHORT")
        short_btn.setProperty("class", "sell")
        short_btn.setMinimumHeight(50)
        short_btn.clicked.connect(lambda: self.place_order("sell"))
        trading_layout.addWidget(short_btn)
        
        layout.addLayout(trading_layout)
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        layout.addStretch()
    
    def setup_positions_panel(self, layout):
        """–ü–∞–Ω–µ–ª—å –ø–æ–∑–∏—Ü–∏–π"""
        header_layout = QHBoxLayout()
        header = QLabel("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        header.setProperty("class", "header")
        header_layout.addWidget(header)
        
        # –û–±—â–∏–π PnL
        self.total_pnl_label = QLabel("PnL: $0.00")
        self.total_pnl_label.setProperty("class", "pnl")
        self.total_pnl_label.setAlignment(Qt.AlignRight)
        header_layout.addWidget(self.total_pnl_label)
        
        layout.addLayout(header_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        self.positions_table = QTableWidget()
        self.positions_table.setColumnCount(7)
        self.positions_table.setHorizontalHeaderLabels([
            "–ü–∞—Ä–∞", "–°—Ç–æ—Ä–æ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–í—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞", "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", "PnL", "PnL%"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.positions_table.horizontalHeader()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(QHeaderView.ResizeToContents)
        
        self.positions_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.positions_table.setAlternatingRowColors(True)
        self.positions_table.verticalHeader().setVisible(False)
        
        layout.addWidget(self.positions_table)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        close_all_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
        close_all_btn.clicked.connect(self.close_all_positions)
        layout.addWidget(close_all_btn)
    
    def setup_logs_panel(self, layout):
        """–ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤"""
        header_layout = QHBoxLayout()
        header = QLabel("–õ–æ–≥–∏")
        header.setProperty("class", "header")
        header_layout.addWidget(header)
        
        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.setMaximumWidth(100)
        clear_btn.clicked.connect(self.clear_logs)
        header_layout.addWidget(clear_btn)
        
        layout.addLayout(header_layout)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ª–æ–≥–æ–≤
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(200)
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)
    
    def setup_pnl_worker(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL"""
        self.pnl_thread = QThread()
        self.pnl_worker = PnLUpdateWorker(self.trader)
        self.pnl_worker.moveToThread(self.pnl_thread)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.pnl_thread.started.connect(self.pnl_worker.run)
        self.pnl_worker.update_signal.connect(self.update_positions)
        self.pnl_worker.log_signal.connect(self.log_message)
        
        self.pnl_thread.start()
    
    def search_pairs(self):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        query = self.search_input.text().strip().upper()
        if not query:
            return
        
        self.log_message(f"–ü–æ–∏—Å–∫ –ø–∞—Ä: {query}", "INFO")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ API
            instruments = self.trader.trading_api.get_instruments(instType="SWAP")
            
            if instruments['code'] != '0':
                self.log_message("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", "ERROR")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
            self.pairs_data = []
            self.pairs_list.clear()
            
            for instrument in instruments['data']:
                inst_id = instrument['instId']
                if query in inst_id:
                    self.pairs_data.append(instrument)
                    self.pairs_list.addItem(inst_id)
            
            self.log_message(f"–ù–∞–π–¥–µ–Ω–æ {len(self.pairs_data)} –ø–∞—Ä", "SUCCESS")
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", "ERROR")
    
    def select_pair(self, item):
        """–í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        selected_text = item.text()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
        for pair_data in self.pairs_data:
            if pair_data['instId'] == selected_text:
                self.selected_pair = pair_data
                break
        
        if self.selected_pair:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            try:
                ticker = self.trader.public_api.get_tickers(instType="SWAP", instId=selected_text)
                if ticker['code'] == '0' and ticker['data']:
                    price = float(ticker['data'][0]['last'])
                    self.selected_pair_label.setText(f"‚úì {selected_text} | –¶–µ–Ω–∞: ${price:.4f}")
                    self.selected_pair_label.setStyleSheet("color: #4caf50; font-weight: 600;")
                    self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {selected_text}", "INFO")
                    self.log_message(f"–¶–µ–Ω–∞ {selected_text}: ${price:.4f}", "INFO")
            except Exception as e:
                self.selected_pair_label.setText(f"‚úì {selected_text}")
                self.log_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}", "WARNING")
    
    def place_preset_order(self, side, amount, leverage):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ—Å–µ—Ç"""
        if not self.selected_pair:
            self.log_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É", "WARNING")
            return
        
        self.log_message(f"–ü–†–ï–°–ï–¢ {side.upper()}: {self.selected_pair['instId']}, –º–∞—Ä–∂–∞ ${amount}, –ø–ª–µ—á–æ {leverage}x", "INFO")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
            self.trader.set_leverage(self.selected_pair['instId'], leverage)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            result = self.trader.place_market_order(
                inst_id=self.selected_pair['instId'],
                side=side,
                margin_usd=amount,
                leverage=leverage
            )
            
            if result:
                self.log_message(f"–ü–†–ï–°–ï–¢ {side.upper()} —Ä–∞–∑–º–µ—â–µ–Ω! ID: {result}", "SUCCESS")
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
                self.margin_input.setText(str(amount))
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ –≤ –≥—Ä—É–ø–ø–µ –∫–Ω–æ–ø–æ–∫
                for btn in self.leverage_group.buttons():
                    if self.leverage_group.id(btn) == leverage:
                        btn.setChecked(True)
                        break
            else:
                self.log_message(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ {side.upper()}", "ERROR")
                
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞: {e}", "ERROR")
    
    def place_order(self, side):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        if not self.selected_pair:
            self.log_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É", "WARNING")
            return
        
        try:
            margin = float(self.margin_input.text())
        except ValueError:
            self.log_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞—Ä–∂—É", "WARNING")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–ª–µ—á–æ
        selected_leverage = None
        for btn in self.leverage_group.buttons():
            if btn.isChecked():
                selected_leverage = self.leverage_group.id(btn)
                break
        
        if not selected_leverage:
            self.log_message("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ", "WARNING")
            return
        
        self.log_message(f"{side.upper()}: {self.selected_pair['instId']}, –º–∞—Ä–∂–∞ ${margin}, –ø–ª–µ—á–æ {selected_leverage}x", "INFO")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
            self.trader.set_leverage(self.selected_pair['instId'], selected_leverage)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            result = self.trader.place_market_order(
                inst_id=self.selected_pair['instId'],
                side=side,
                margin_usd=margin,
                leverage=selected_leverage
            )
            
            if result:
                self.log_message(f"–û—Ä–¥–µ—Ä {side.upper()} —Ä–∞–∑–º–µ—â–µ–Ω! ID: {result}", "SUCCESS")
            else:
                self.log_message(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {side.upper()}", "ERROR")
                
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞: {e}", "ERROR")
    
    def update_positions(self, positions, total_pnl, total_pnl_percentage):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π"""
        self.positions_table.setRowCount(len(positions))
        
        for i, pos in enumerate(positions):
            inst_id = pos.get('instId', '')
            side = "LONG" if float(pos.get('pos', 0)) > 0 else "SHORT"
            size = abs(float(pos.get('pos', 0)))
            avg_px = float(pos.get('avgPx', 0))
            mark_px = float(pos.get('markPx', 0))
            upl = float(pos.get('upl', 0))
            upl_ratio = float(pos.get('uplRatio', 0)) * 100
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É
            self.positions_table.setItem(i, 0, QTableWidgetItem(inst_id))
            self.positions_table.setItem(i, 1, QTableWidgetItem(side))
            self.positions_table.setItem(i, 2, QTableWidgetItem(f"{size:.4f}"))
            self.positions_table.setItem(i, 3, QTableWidgetItem(f"${avg_px:.4f}"))
            self.positions_table.setItem(i, 4, QTableWidgetItem(f"${mark_px:.4f}"))
            
            # PnL —Å —Ü–≤–µ—Ç–æ–º
            pnl_item = QTableWidgetItem(format_currency(upl))
            pnl_item.setForeground(QColor("#4caf50" if upl >= 0 else "#f44336"))
            self.positions_table.setItem(i, 5, pnl_item)
            
            pnl_percent_item = QTableWidgetItem(format_percentage(upl_ratio))
            pnl_percent_item.setForeground(QColor("#4caf50" if upl_ratio >= 0 else "#f44336"))
            self.positions_table.setItem(i, 6, pnl_percent_item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π PnL
        color = "#4caf50" if total_pnl >= 0 else "#f44336"
        pnl_text = f"PnL: {format_currency(total_pnl)} ({format_percentage(total_pnl_percentage)})"
        self.total_pnl_label.setText(pnl_text)
        self.total_pnl_label.setStyleSheet(f"color: {color}; font-weight: 700; font-size: 16px; padding: 8px; border-radius: 6px; background-color: #1a1a1a;")
    
    def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            closed_count = self.trader.close_all_positions()
            if closed_count > 0:
                self.log_message(f"–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {closed_count}", "SUCCESS")
            else:
                self.log_message("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è", "INFO")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}", "ERROR")
    
    def log_message(self, message, level="INFO"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {level}: {message}"
        self.logs.append(log_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if len(self.logs) > 100:
            self.logs = self.logs[-100:]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.log_text.setPlainText("\n".join(self.logs))
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.End)
        self.log_text.setTextCursor(cursor)
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs = []
        self.log_text.clear()
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if hasattr(self, 'pnl_worker'):
            self.pnl_worker.stop()
        if hasattr(self, 'pnl_thread'):
            self.pnl_thread.quit()
            self.pnl_thread.wait()
        event.accept()


def main():
    app = QApplication(sys.argv)
    app.setApplicationName("–¢—Ä–µ–π–¥–µ—Ä")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    window = TradingApp()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == '__main__':
    main() 