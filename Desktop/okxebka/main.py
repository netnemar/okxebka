import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from datetime import datetime
from okx_trader import OKXTrader, format_currency, format_percentage


class OKXTradingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("OKX –§—å—é—á–µ—Ä—Å –¢—Ä–µ–π–¥–µ—Ä Pro")
        self.root.geometry("1200x800")
        self.root.configure(bg='#0a0e1a')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        try:
            self.trader = OKXTrader()
            self.connected = True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OKX API: {e}")
            self.connected = False
            return
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.selected_pair = None
        self.current_positions = []
        self.pnl_update_thread = None
        self.stop_pnl_updates = False
        self.logs = []  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        
        self.setup_ui()
        self.start_pnl_updates()
        
    def log_message(self, message, level="INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {level}: {message}"
        self.logs.append(log_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
        if len(self.logs) > 100:
            self.logs = self.logs[-100:]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, 'log_text'):
            self.log_text.delete(1.0, tk.END)
            self.log_text.insert(tk.END, "\n".join(self.logs))
            self.log_text.see(tk.END)
            
    def setup_logs_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(parent, text="üìã –õ–æ–≥–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏", bg='#1a1f2e', fg='#64b5f6', 
                         font=('Arial', 12, 'bold'))
        header.pack(pady=(0, 10))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        log_frame = tk.Frame(parent, bg='#1a1f2e')
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame, 
            wrap=tk.WORD, 
            height=8,
            bg='#0d1421', 
            fg='#e0e0e0',
            insertbackground='white',
            font=('Consolas', 9),
            relief=tk.FLAT,
            borderwidth=0
        )
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_btn = tk.Button(parent, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_logs,
                             bg='#b0bec5', fg='black', font=('Arial', 9),
                             relief=tk.FLAT, bd=0, padx=10, pady=5)
        clear_btn.pack(pady=(5, 0))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_message("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OKX –¢—Ä–µ–π–¥–µ—Ä Pro!", "INFO")
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs = []
        if hasattr(self, 'log_text'):
            self.log_text.delete(1.0, tk.END)
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Title.TLabel', font=('Arial', 18, 'bold'), background='#0a0e1a', foreground='#64b5f6')
        style.configure('Header.TLabel', font=('Arial', 14, 'bold'), background='#1a1f2e', foreground='#81c784')
        style.configure('Info.TLabel', font=('Arial', 10), background='#1a1f2e', foreground='#b0bec5')
        
        # –°—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        title_frame = tk.Frame(self.root, bg='#0a0e1a', height=60)
        title_frame.pack(fill=tk.X, pady=(10, 20))
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, text="üöÄ OKX –§—å—é—á–µ—Ä—Å –¢—Ä–µ–π–¥–µ—Ä Pro", 
                              bg='#0a0e1a', fg='#64b5f6',
                              font=('Arial', 20, 'bold'))
        title_label.pack(expand=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#0a0e1a')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–æ—Ä–≥–æ–≤–ª—è
        left_frame = tk.Frame(main_frame, bg='#1a1f2e', relief=tk.RAISED, bd=1, highlightbackground='#3a4a5e', highlightthickness=1)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=False, padx=(0, 10), ipadx=10, ipady=10)
        left_frame.configure(width=400)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞)
        right_container = tk.Frame(main_frame, bg='#0a0e1a')
        right_container.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –ø–æ–∑–∏—Ü–∏–∏
        right_upper_frame = tk.Frame(right_container, bg='#1a1f2e', relief=tk.RAISED, bd=1, highlightbackground='#3a4a5e', highlightthickness=1)
        right_upper_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 5), ipadx=10, ipady=10)
        
        # –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏
        right_lower_frame = tk.Frame(right_container, bg='#1a1f2e', relief=tk.RAISED, bd=1, highlightbackground='#3a4a5e', highlightthickness=1)
        right_lower_frame.pack(fill=tk.BOTH, expand=False, ipadx=10, ipady=10)
        right_lower_frame.configure(height=200)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
        
        self.setup_trading_panel(left_frame)
        self.setup_positions_panel(right_upper_frame)
        self.setup_logs_panel(right_lower_frame)
        
    def setup_trading_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        # –°—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(parent, text="‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", bg='#1a1f2e', fg='#81c784', 
                         font=('Arial', 14, 'bold'))
        header.pack(pady=(0, 15))
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ä—ã
        search_frame = tk.Frame(parent, bg='#1a1f2e')
        search_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫ –ø–∞—Ä—ã:", bg='#1a1f2e', fg='#b0bec5', font=('Arial', 10, 'bold')).pack(anchor=tk.W)
        
        search_entry_frame = tk.Frame(search_frame, bg='#1a1f2e')
        search_entry_frame.pack(fill=tk.X, pady=5)
        
        self.search_entry = tk.Entry(search_entry_frame, font=('Arial', 12), width=20, 
                                    bg='#2a3441', fg='white', insertbackground='#64b5f6',
                                    relief=tk.FLAT, bd=0, highlightbackground='#3a4a5e', highlightthickness=1)
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5), ipady=8)
        self.search_entry.bind('<Return>', lambda e: self.search_pairs())
        
        search_btn = tk.Button(search_entry_frame, text="üîç", command=self.search_pairs, 
                              bg='#64b5f6', fg='black', font=('Arial', 10, 'bold'),
                              relief=tk.FLAT, bd=0, padx=15, pady=8,
                              cursor='hand2')
        search_btn.pack(side=tk.RIGHT)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self.pairs_listbox = tk.Listbox(search_frame, height=6, font=('Arial', 10), 
                                       bg='#2a3441', fg='#e0e0e0', selectbackground='#64b5f6',
                                       relief=tk.FLAT, bd=0, highlightbackground='#3a4a5e', highlightthickness=1)
        self.pairs_listbox.pack(fill=tk.X, pady=5, ipady=5)
        self.pairs_listbox.bind('<<ListboxSelect>>', self.on_pair_select)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ
        self.pair_info_label = tk.Label(parent, text="‚û§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É", 
                                       bg='#1a1f2e', fg='#ffcc02', font=('Arial', 11, 'bold'))
        self.pair_info_label.pack(pady=10)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
        presets_frame = tk.Frame(parent, bg='#1a1f2e')
        presets_frame.pack(fill=tk.X, padx=10, pady=(0, 15))
        
        tk.Label(presets_frame, text="‚ö° –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥:", bg='#1a1f2e', fg='#b0bec5', font=('Arial', 10, 'bold')).pack(anchor=tk.W)
        
        presets_buttons_frame = tk.Frame(presets_frame, bg='#1a1f2e')
        presets_buttons_frame.pack(fill=tk.X, pady=5)
        
        # –ü—Ä–µ—Å–µ—Ç 1: 300 USD 10x
        preset1_frame = tk.Frame(presets_buttons_frame, bg='#1a1f2e')
        preset1_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 3))
        
        long_btn_300 = tk.Button(preset1_frame, text="üìà 300$", command=lambda: self.place_preset_order("buy", 300, 10),
                                bg='#00c853', fg='black', font=('Arial', 10, 'bold'), 
                                relief=tk.FLAT, bd=0, cursor='hand2', pady=6)
        long_btn_300.pack(fill=tk.X, pady=(0, 2))
        
        short_btn_300 = tk.Button(preset1_frame, text="üìâ 300$", command=lambda: self.place_preset_order("sell", 300, 10),
                                 bg='#d32f2f', fg='black', font=('Arial', 10, 'bold'), 
                                 relief=tk.FLAT, bd=0, cursor='hand2', pady=6)
        short_btn_300.pack(fill=tk.X)
        
        # –ü—Ä–µ—Å–µ—Ç 2: 500 USD 10x
        preset2_frame = tk.Frame(presets_buttons_frame, bg='#1a1f2e')
        preset2_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        
        long_btn_500 = tk.Button(preset2_frame, text="üìà 500$", command=lambda: self.place_preset_order("buy", 500, 10),
                                bg='#00c853', fg='black', font=('Arial', 10, 'bold'), 
                                relief=tk.FLAT, bd=0, cursor='hand2', pady=6)
        long_btn_500.pack(fill=tk.X, pady=(0, 2))
        
        short_btn_500 = tk.Button(preset2_frame, text="üìâ 500$", command=lambda: self.place_preset_order("sell", 500, 10),
                                 bg='#d32f2f', fg='black', font=('Arial', 10, 'bold'), 
                                 relief=tk.FLAT, bd=0, cursor='hand2', pady=6)
        short_btn_500.pack(fill=tk.X)
        
        # –ü—Ä–µ—Å–µ—Ç 3: 1500 USD 10x
        preset3_frame = tk.Frame(presets_buttons_frame, bg='#1a1f2e')
        preset3_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(3, 0))
        
        long_btn_1500 = tk.Button(preset3_frame, text="üìà 1500$", command=lambda: self.place_preset_order("buy", 1500, 10),
                                 bg='#00c853', fg='black', font=('Arial', 10, 'bold'), 
                                 relief=tk.FLAT, bd=0, cursor='hand2', pady=6)
        long_btn_1500.pack(fill=tk.X, pady=(0, 2))
        
        short_btn_1500 = tk.Button(preset3_frame, text="üìâ 1500$", command=lambda: self.place_preset_order("sell", 1500, 10),
                                  bg='#d32f2f', fg='black', font=('Arial', 10, 'bold'), 
                                  relief=tk.FLAT, bd=0, cursor='hand2', pady=6)
        short_btn_1500.pack(fill=tk.X)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        params_frame = tk.Frame(parent, bg='#1a1f2e')
        params_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ú–∞—Ä–∂–∞ –≤ USD
        tk.Label(params_frame, text="üí∞ –ú–∞—Ä–∂–∞ (USD):", bg='#1a1f2e', fg='#b0bec5', font=('Arial', 10, 'bold')).pack(anchor=tk.W)
        self.amount_entry = tk.Entry(params_frame, font=('Arial', 12, 'bold'), 
                                   bg='#2a3441', fg='white', insertbackground='#64b5f6',
                                   relief=tk.FLAT, bd=0, highlightbackground='#3a4a5e', highlightthickness=1)
        self.amount_entry.pack(fill=tk.X, pady=(5, 15), ipady=8)
        self.amount_entry.insert(0, "100")
        
        # –ü–ª–µ—á–æ
        tk.Label(params_frame, text="‚ö° –ü–ª–µ—á–æ:", bg='#1a1f2e', fg='#b0bec5', font=('Arial', 10, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        self.leverage_var = tk.StringVar(value="10")
        leverage_frame = tk.Frame(params_frame, bg='#1a1f2e')
        leverage_frame.pack(fill=tk.X, pady=(0, 15))
        
        for lev in ["5", "10", "20", "50", "100"]:
            tk.Radiobutton(leverage_frame, text=f"{lev}x", variable=self.leverage_var, value=lev,
                          bg='#1a1f2e', fg='#e0e0e0', selectcolor='#64b5f6', activebackground='#2a3441',
                          activeforeground='white', font=('Arial', 10, 'bold'), cursor='hand2',
                          relief=tk.FLAT, bd=0).pack(side=tk.LEFT, padx=8)
        
        # –°—Ç–∏–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(params_frame, bg='#1a1f2e')
        buttons_frame.pack(fill=tk.X, pady=15)
        
        self.long_btn = tk.Button(buttons_frame, text="üìà LONG", command=lambda: self.place_order("buy"),
                                 bg='#00c853', fg='black', font=('Arial', 13, 'bold'), 
                                 relief=tk.FLAT, bd=0, cursor='hand2', pady=12,
                                 activebackground='#4caf50')
        self.long_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 8))
        
        self.short_btn = tk.Button(buttons_frame, text="üìâ SHORT", command=lambda: self.place_order("sell"),
                                  bg='#d32f2f', fg='black', font=('Arial', 13, 'bold'), 
                                  relief=tk.FLAT, bd=0, cursor='hand2', pady=12,
                                  activebackground='#f44336')
        self.short_btn.pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(8, 0))
        
    def setup_positions_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ–∑–∏—Ü–∏–π"""
        # –°—Ç–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(parent, text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", bg='#1a1f2e', fg='#81c784', 
                         font=('Arial', 14, 'bold'))
        header.pack(pady=(0, 15))
        
        # –û–±—â–∏–π PnL —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        pnl_frame = tk.Frame(parent, bg='#2a3441', relief=tk.FLAT, bd=0)
        pnl_frame.pack(fill=tk.X, padx=10, pady=(0, 15))
        
        self.total_pnl_label = tk.Label(pnl_frame, text="üí∞ –û–±—â–∏–π PnL: $0.00 (0.00%)", 
                                       bg='#2a3441', fg='#ffcc02', font=('Arial', 12, 'bold'))
        self.total_pnl_label.pack(pady=8)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        positions_frame = tk.Frame(parent, bg='#1a1f2e')
        positions_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        columns = ('–ü–∞—Ä–∞', '–°—Ç–æ—Ä–æ–Ω–∞', '–†–∞–∑–º–µ—Ä', '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞', '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞', 'PnL', 'PnL%')
        self.positions_tree = ttk.Treeview(positions_frame, columns=columns, show='headings', height=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for col in columns:
            self.positions_tree.heading(col, text=col)
            self.positions_tree.column(col, width=100, anchor=tk.CENTER)
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(positions_frame, orient=tk.VERTICAL, command=self.positions_tree.yview)
        self.positions_tree.configure(yscrollcommand=scrollbar.set)
        
        self.positions_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –°—Ç–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        close_all_btn = tk.Button(parent, text="üö´ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", 
                                 command=self.close_all_positions,
                                 bg='#ff7043', fg='black', font=('Arial', 11, 'bold'),
                                 relief=tk.FLAT, bd=0, cursor='hand2', pady=8,
                                 activebackground='#ff5722')
        close_all_btn.pack(pady=15, padx=10, fill=tk.X)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self.close_selected_position)
        self.positions_tree.bind("<Button-3>", self.show_context_menu)
        

    def search_pairs(self):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        search_term = self.search_entry.get().strip()
        if not search_term:
            self.log_message("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞", "WARNING")
            return
            
        try:
            self.log_message(f"üîç –ü–æ–∏—Å–∫ –ø–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_term}")
            pairs = self.trader.search_futures_pair(search_term)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
            self.pairs_listbox.delete(0, tk.END)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            for pair in pairs:
                self.pairs_listbox.insert(tk.END, pair['instId'])
                
            if not pairs:
                self.pairs_listbox.insert(tk.END, "–ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.log_message(f"‚ùå –ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è '{search_term}'", "WARNING")
            else:
                self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –ø–∞—Ä", "SUCCESS")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            
    def on_pair_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã"""
        selection = self.pairs_listbox.curselection()
        if selection:
            selected_pair = self.pairs_listbox.get(selection[0])
            if selected_pair != "–ü–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã":
                self.selected_pair = selected_pair
                self.log_message(f"üìç –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {selected_pair}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                current_price = self.trader.get_current_price(selected_pair)
                if current_price:
                    self.pair_info_label.config(
                        text=f"‚úÖ {selected_pair} | –¶–µ–Ω–∞: ${current_price:,.4f}",
                        fg='#4CAF50'
                    )
                    self.log_message(f"üí∞ –¶–µ–Ω–∞ {selected_pair}: ${current_price:,.4f}")
                else:
                    self.pair_info_label.config(
                        text=f"‚ö†Ô∏è {selected_pair} | –¶–µ–Ω–∞: –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞",
                        fg='#ffcc02'
                    )
                    self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {selected_pair}", "WARNING")
                    
    def place_order(self, side):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        if not self.selected_pair:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É")
            return
            
        try:
            amount = float(self.amount_entry.get())
            leverage = int(self.leverage_var.get())
            
            if amount <= 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
                return
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            current_price = self.trader.get_current_price(self.selected_pair)
            if not current_price:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
                return
                
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            size = self.trader.calculate_position_size(
                self.selected_pair, amount, leverage, current_price
            )
            
            if not size or size == "0":
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return
                
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            side_text = "LONG" if side == "buy" else "SHORT"
            self.log_message(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ {side_text} –æ—Ä–¥–µ—Ä–∞: {self.selected_pair}, –º–∞—Ä–∂–∞ ${amount}, –ø–ª–µ—á–æ {leverage}x")
            
            result = self.trader.place_market_order(
                self.selected_pair, side, size, leverage
            )
            
            if result['success']:
                self.log_message(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω! ID: {result['order_id']}", "SUCCESS")
                self.update_positions()
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {result['error']}", "ERROR")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result['error']}")
                    
        except ValueError:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
    
    def place_preset_order(self, side, amount, leverage):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –ø—Ä–µ—Å–µ—Ç—É"""
        if not self.selected_pair:
            self.log_message("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É!", "WARNING")
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É")
            return
            
        try:
            side_text = "LONG" if side == "buy" else "SHORT"
            self.log_message(f"üöÄ –ü–†–ï–°–ï–¢ {side_text}: {self.selected_pair}, –º–∞—Ä–∂–∞ ${amount}, –ø–ª–µ—á–æ {leverage}x")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self.trader.get_current_price(self.selected_pair)
            if not current_price:
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞", "ERROR")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            size = self.trader.calculate_position_size(
                self.selected_pair, amount, leverage, current_price
            )
            
            if not size or size == "0":
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞", "ERROR")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = self.trader.place_market_order(
                self.selected_pair, side, size, leverage
            )
            
            if result['success']:
                self.log_message(f"‚úÖ –ü–†–ï–°–ï–¢ {side_text} —Ä–∞–∑–º–µ—â–µ–Ω! ID: {result['order_id']}", "SUCCESS")
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                self.amount_entry.delete(0, tk.END)
                self.amount_entry.insert(0, str(amount))
                self.leverage_var.set(str(leverage))
                self.update_positions()
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞: {result['error']}", "ERROR")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result['error']}")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞: {e}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
            
    def update_positions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = self.trader.get_positions()
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.positions_tree.get_children():
                self.positions_tree.delete(item)
                
            total_pnl = 0
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            for pos in positions:
                inst_id = pos['instId']
                side = "LONG" if float(pos['pos']) > 0 else "SHORT"
                size = abs(float(pos['pos']))
                avg_price = float(pos['avgPx'])
                mark_price = float(pos['markPx'])
                pnl = float(pos['upl'])
                pnl_ratio = float(pos['uplRatio'])
                
                total_pnl += pnl
                
                # –¶–≤–µ—Ç –¥–ª—è PnL
                pnl_color = 'green' if pnl >= 0 else 'red'
                pnl_text = f"${pnl:,.2f}"
                pnl_ratio_text = f"{pnl_ratio*100:+.2f}%"
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                item = self.positions_tree.insert('', 'end', values=(
                    inst_id, side, f"{size:,.0f}", f"${avg_price:,.4f}", 
                    f"${mark_price:,.4f}", pnl_text, pnl_ratio_text
                ))
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è PnL
                if pnl >= 0:
                    self.positions_tree.set(item, 'PnL', pnl_text)
                    self.positions_tree.set(item, 'PnL%', pnl_ratio_text)
                
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ PnL
            total_pnl_color = 'green' if total_pnl >= 0 else 'red'
            self.total_pnl_label.config(
                text=f"–û–±—â–∏–π PnL: ${total_pnl:,.2f}",
                fg=total_pnl_color
            )
            
            self.current_positions = positions
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            
    def start_pnl_updates(self):
        """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PnL –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        def update_loop():
            while not self.stop_pnl_updates:
                self.update_positions()
                time.sleep(2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
        self.pnl_update_thread = threading.Thread(target=update_loop, daemon=True)
        self.pnl_update_thread.start()
        
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
            
    def close_selected_position(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        selection = self.positions_tree.selection()
        if not selection:
            return
            
        item = selection[0]
        values = self.positions_tree.item(item, 'values')
        inst_id = values[0]
        
        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é {inst_id}?")
        if confirm:
            try:
                result = self.trader.close_position(inst_id, None)
                if result['success']:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                    self.update_positions()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {result['error']}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
                
    def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.current_positions:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
            
        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                                    f"–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(self.current_positions)} —à—Ç.)?")
        if confirm:
            try:
                result = self.trader.close_all_positions()
                
                if result['success']:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", result['message'])
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    error_details = []
                    for r in result.get('results', []):
                        if not r['success']:
                            error_details.append(f"{r['instId']}: {r['error']}")
                    
                    if error_details:
                        messagebox.showwarning("–û—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è", 
                                             f"{result['message']}\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(error_details))
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                    
                self.update_positions()
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
                
    def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if not self.current_positions:
            self.log_message("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è", "INFO")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
            
        self.log_message(f"üö´ –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ({len(self.current_positions)} —à—Ç.)")
        
        try:
            result = self.trader.close_all_positions()
            
            if result['success']:
                self.log_message(f"‚úÖ {result['message']}", "SUCCESS")
                messagebox.showinfo("–£—Å–ø–µ—Ö", result['message'])
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
                error_details = []
                for r in result.get('results', []):
                    if not r['success']:
                        error_details.append(f"{r['instId']}: {r['error']}")
                        self.log_message(f"‚ùå {r['instId']}: {r['error']}", "ERROR")
                
                if error_details:
                    self.log_message(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: {result['message']}", "WARNING")
                    messagebox.showwarning("–û—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è", 
                                         f"{result['message']}\n\n–û—à–∏–±–∫–∏:\n" + "\n".join(error_details))
                else:
                    self.log_message(f"‚ùå {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "ERROR")
                    messagebox.showerror("–û—à–∏–±–∫–∞", result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                
            self.update_positions()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
    
    def close_selected_position(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        selected_item = self.positions_tree.selection()
        if not selected_item:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        item_values = self.positions_tree.item(selected_item[0], 'values')
        if not item_values:
            return
            
        inst_id = item_values[0]  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø–∞—Ä–∞
        self.log_message(f"üö´ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {inst_id}")
        
        try:
            result = self.trader.close_position(inst_id, None)
            
            if result['success']:
                self.log_message(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {inst_id} –∑–∞–∫—Ä—ã—Ç–∞! ID: {result['order_id']}", "SUCCESS")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ–∑–∏—Ü–∏—è {inst_id} –∑–∞–∫—Ä—ã—Ç–∞!")
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {inst_id}: {result['error']}", "ERROR")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result['error']}")
                
            self.update_positions()
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {inst_id}: {e}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–π"""
        # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –ø—Ä–∞–≤–æ–º –∫–ª–∏–∫–µ
        item = self.positions_tree.identify_row(event.y)
        if item:
            self.positions_tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log_message("üëã –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.stop_pnl_updates = True
        if self.pnl_update_thread:
            self.pnl_update_thread.join(timeout=1)
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = OKXTradingApp(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    root.mainloop() 